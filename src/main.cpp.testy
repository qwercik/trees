#include <iostream>
#include <algorithm>
#include <chrono>
#include <vector>
#include <cstdlib>
#include <functional>
#include <ctime>
#include <trees/bst/BinarySearchTree.hpp>
#include <trees/avl/AvlTree.hpp>
#include <trees/io.hpp>

#include <sys/resource.h>

void requestMoreStackSize() {
	const rlim_t newSize = 64L * 1024L * 1024L;
	rlimit rl;
	int result;
	result = getrlimit(RLIMIT_STACK, &rl);
	if (result == 0) {
		if (rl.rlim_cur < newSize) {
			rl.rlim_cur = newSize;
			result = setrlimit(RLIMIT_STACK, &rl);
			if (result != 0) {
				std::cerr << "Wystąpił błąd!";
				exit(1);
			}
		}
	}
}

double measureExecutionTime(std::function<void()> callback) {
    auto startTime = std::chrono::high_resolution_clock::now();
    callback();
    auto stopTime = std::chrono::high_resolution_clock::now();

    auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(stopTime - startTime).count();
    return milliseconds / 1000.;
}

// Tak, wiem że ten kod jakością nie powala, ale był pisany "na szybko", tylko w celach testowych
int main(int argc, char *argv[]) {
	requestMoreStackSize();


    //std::vector<int> lista = {100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
    std::vector<int> lista = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};

    //std::vector<int> lista = {50, 6, 62, 28, 8, 3, 10, 59, 60, 43, 53, 4, 76, 37, 48, 99, 34, 31, 88, 84, 65, 17, 51, 25, 86, 55, 24, 41, 81, 74, 87, 67, 30, 35, 13, 36, 97, 42, 2, 38, 21, 27, 78, 52, 71, 64, 33, 63, 70, 56, 72, 29, 57, 91, 58, 46, 79, 20, 23, 77, 61, 7, 68, 22, 100, 85, 95, 45, 19, 47, 5, 93, 90, 83, 44, 16, 49, 82, 11, 80, 26, 89, 98, 75, 18, 73, 54, 9, 96, 1, 15, 94, 12, 66, 39, 92, 32, 69, 40, 14};
    BinarySearchTree<int> tree;
    tree.insertList(lista.begin(), lista.end());
    std::cout << "PRE: " << tree.traversePreOrder() << '\n';
    std::cout << "H: " << tree.height() << '\n' << '\n';

    tree.dsw();

    std::cerr << "Po wszystkim: " << std::endl;
    std::cout << "PRE: " << tree.traversePreOrder() << '\n';
    std::cout << "H: " << tree.height() << '\n' << '\n';
}
